---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/all_variable_handling/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys
import types
message_1 = "from conflict_module"
SHARED_NAME = "conflict_module_version"
def exported_from_init():
	"""Function exported from package __init__.py"""
	return f"From init, using helper: {helper_func()}"
def helper_func():
	"""Helper function used by other modules"""
	return "helper result"
def another_helper():
	"""Another helper function"""
	return "another helper"
UTILS_CONSTANT = "utils value"
def __cribo_init___cribo_11029d_nested_package_submodule():
	if '__cribo_11029d_nested_package_submodule' in sys.modules:
		return sys.modules['__cribo_11029d_nested_package_submodule']
	module = types.ModuleType('__cribo_11029d_nested_package_submodule')
	module.__file__ = __file__ if '__file__' in globals() else None
	sys.modules['__cribo_11029d_nested_package_submodule'] = module
	sys.modules['nested_package.submodule'] = module
	__all__ = ["sub_function", "SUB_CONSTANT"]

	def sub_function():
		"""Function from submodule"""
		return "Hello from submodule"
	module.sub_function = sub_function

	def _private_sub_func():
		"""Private function in submodule"""
		return "private submodule function"
	SUB_CONSTANT = "submodule_value"
	module.SUB_CONSTANT = SUB_CONSTANT
	message = "from submodule"
	module.__all__ = ['sub_function', 'SUB_CONSTANT']
	return module
def __cribo_init___cribo_8010fb_simple_module():
	if '__cribo_8010fb_simple_module' in sys.modules:
		return sys.modules['__cribo_8010fb_simple_module']
	module = types.ModuleType('__cribo_8010fb_simple_module')
	module.__file__ = __file__ if '__file__' in globals() else None
	sys.modules['__cribo_8010fb_simple_module'] = module
	sys.modules['simple_module'] = module
	__all__ = ["public_func", "CONSTANT"]

	def public_func():
		"""A public function that should be exported."""
		return "Hello from public_func"
	module.public_func = public_func

	def _private_func():
		"""A private function that should not be exported."""
		return "This is private"
	CONSTANT = 42
	module.CONSTANT = CONSTANT
	_PRIVATE_CONSTANT = "secret"

	class InternalClass:
		pass
	module.__all__ = ['public_func', 'CONSTANT']
	return module
__cribo_modules = {'nested_package.submodule': '__cribo_11029d_nested_package_submodule', 'simple_module': '__cribo_8010fb_simple_module'}
__cribo_init_functions = {'__cribo_11029d_nested_package_submodule': __cribo_init___cribo_11029d_nested_package_submodule, '__cribo_8010fb_simple_module': __cribo_init___cribo_8010fb_simple_module}
class CriboBundledFinder:

	def __init__(self, module_registry, init_functions):
		self.module_registry = module_registry
		self.init_functions = init_functions

	def find_spec(self, fullname, path, target=None):
		if fullname in self.module_registry:
			synthetic_name = self.module_registry[fullname]
			if synthetic_name not in sys.modules:
				init_func = self.init_functions.get(synthetic_name)
				if init_func:
					init_func()
			import importlib.util
			return importlib.util.find_spec(synthetic_name)
		return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_8010fb_simple_module()
__cribo_init___cribo_11029d_nested_package_submodule()
public_func = sys.modules['simple_module'].public_func
CONSTANT = sys.modules['simple_module'].CONSTANT
sub_function = sys.modules['nested_package.submodule'].sub_function
message = message_1
print("Testing simple module exports:")
print(f"public_func() = {public_func()}")
print(f"CONSTANT = {CONSTANT}")
print("\nTesting nested package exports:")
print(f"exported_from_init() = {exported_from_init()}")
print(f"sub_function() = {sub_function()}")
print("\nTesting conflict resolution:")
print(f"message = {message}")
simple_module = sys.modules['simple_module']
print(f"\nsimple_module.__all__ = {simple_module.__all__}")
sub = sys.modules['nested_package.submodule']
print(f"submodule.__all__ = {sub.__all__}")
