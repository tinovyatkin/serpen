---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/ast_rewriting_regular_import_aliases/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import collections.abc
import json
import math
import random
import sys
import types
import urllib.parse
import xml.etree.ElementTree
def __cribo_init___cribo_508050_utils_config():
	if '__cribo_508050_utils_config' in sys.modules:
		return sys.modules['__cribo_508050_utils_config']
	module = types.ModuleType('__cribo_508050_utils_config')
	module.__file__ = __file__ if '__file__' in globals() else None
	sys.modules['__cribo_508050_utils_config'] = module
	sys.modules['utils.config'] = module
	"""Configuration module for testing regular import aliases."""
	DEFAULT_CONFIG = {"debug": True, "timeout": 30}
	module.DEFAULT_CONFIG = DEFAULT_CONFIG

	def get_config():
		"""Get the default configuration."""
		return DEFAULT_CONFIG.copy()
	module.get_config = get_config
	return module
def __cribo_init___cribo_17db52_utils_helpers():
	if '__cribo_17db52_utils_helpers' in sys.modules:
		return sys.modules['__cribo_17db52_utils_helpers']
	module = types.ModuleType('__cribo_17db52_utils_helpers')
	module.__file__ = __file__ if '__file__' in globals() else None
	sys.modules['__cribo_17db52_utils_helpers'] = module
	sys.modules['utils.helpers'] = module
	"""Utility module for testing regular import aliases."""

	def helper_function():
		"""A simple helper function."""
		return "helper_result"
	module.helper_function = helper_function

	class UtilityClass:
		"""A simple utility class."""

		def __init__(self, value):
			self.value = value

		def get_value(self):
			return self.value
	module.UtilityClass = UtilityClass
	return module
__cribo_modules = {'utils.config': '__cribo_508050_utils_config', 'utils.helpers': '__cribo_17db52_utils_helpers'}
__cribo_init_functions = {'__cribo_508050_utils_config': __cribo_init___cribo_508050_utils_config, '__cribo_17db52_utils_helpers': __cribo_init___cribo_17db52_utils_helpers}
class CriboBundledFinder:

	def __init__(self, module_registry, init_functions):
		self.module_registry = module_registry
		self.init_functions = init_functions

	def find_spec(self, fullname, path, target=None):
		if fullname in self.module_registry:
			synthetic_name = self.module_registry[fullname]
			if synthetic_name not in sys.modules:
				init_func = self.init_functions.get(synthetic_name)
				if init_func:
					init_func()
			import importlib.util
			return importlib.util.find_spec(synthetic_name)
		return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_17db52_utils_helpers()
__cribo_init___cribo_508050_utils_config()
"""
Test fixture for regular import statements with aliases (non-"from" imports).
This exercises the code path in ast_rewriter.rs around lines 216-228.
"""
helper_utils = sys.modules['utils.helpers']
config_module = sys.modules['utils.config']
def main():
	"""Test function that uses the imported modules with aliases."""
	print("Current working directory: /test/working/directory")
	data = {"test": "value"}
	json_str = json.dumps(data)
	print("JSON string:", json_str)
	print("Python version: sys.version_info(major=3, minor=13, micro=3, releaselevel='final', serial=0)")
	print("ABC module available:", hasattr(collections.abc, "ABC"))
	parsed_url = urllib.parse.urlparse("https://example.com/path")
	print("Parsed URL:", parsed_url.netloc)
	root = xml.etree.ElementTree.Element("root")
	xml.etree.ElementTree.SubElement(root, "child")
	print("XML element tag:", root.tag)
	result = helper_utils.helper_function()
	print("Helper result:", result)
	util_obj = helper_utils.UtilityClass("test_value")
	print("Utility value:", util_obj.get_value())
	config = config_module.get_config()
	print("Config debug:", config["debug"])
	print("Pi value:", math.pi)
	random.seed(42)
	print("Random number:", random.randint(1, 100))
	return "regular_import_aliases_test_complete"
if __name__ == "__main__":
	result = main()
	print(result)
