---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/stickytape_script_using_stdlib_module_in_package/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys
import types
import xml.etree.ElementTree
def __cribo_init___cribo_e6b571_greeting():
	if '__cribo_e6b571_greeting' in sys.modules:
		return sys.modules['__cribo_e6b571_greeting']
	module = types.ModuleType('__cribo_e6b571_greeting')
	module.__file__ = __file__ if '__file__' in globals() else None
	sys.modules['__cribo_e6b571_greeting'] = module
	sys.modules['greeting'] = module
	message = "Hello"
	module.message = message
	return module
__cribo_modules = {'greeting': '__cribo_e6b571_greeting'}
__cribo_init_functions = {'__cribo_e6b571_greeting': __cribo_init___cribo_e6b571_greeting}
class CriboBundledFinder:

	def __init__(self, module_registry, init_functions):
		self.module_registry = module_registry
		self.init_functions = init_functions

	def find_spec(self, fullname, path, target=None):
		if fullname in self.module_registry:
			synthetic_name = self.module_registry[fullname]
			if synthetic_name not in sys.modules:
				init_func = self.init_functions.get(synthetic_name)
				if init_func:
					init_func()
			import importlib.util
			return importlib.util.find_spec(synthetic_name)
		return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_e6b571_greeting()
greeting = sys.modules['greeting']
print(xml.etree.ElementTree.__name__)
print(greeting.message)
