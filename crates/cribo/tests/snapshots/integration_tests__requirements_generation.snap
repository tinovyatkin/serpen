---
source: crates/cribo/tests/integration_tests.rs
description: Bundle and requirements generation for project with third-party dependencies
expression: output
---
=== BUNDLE CONTENT ===
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import re
from typing import Union
from typing import Optional
"""Validation utilities."""
def validate_email(email: str) -> bool:
    """Simple email validation."""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))
def sanitize_input(text: str) -> str:
    """Sanitize input text."""
    dangerous_chars = ['<', '>', '"', "'", '&']
    sanitized = text
    for char in dangerous_chars:
        sanitized = sanitized.replace(char, '')
    return sanitized.strip()
def validate_age(age: Union[int, str]) -> bool:
    """Validate age value."""
    try:
        age_int = int(age)
        return 0 <= age_int <= 150
    except (ValueError, TypeError):
        return False
"""Utils package initialization."""
"""User schema definitions using Pydantic."""
class UserSchema(BaseModel):
    """User model with Pydantic validation."""
    name: str = Field(..., min_length=1, max_length=100, description="User's full name")
    email: EmailStr = Field(..., description="User's email address")
    age: int = Field(..., ge=0, le=150, description="User's age")
    is_active: bool = Field(default=True, description="Whether the user is active")
    bio: Optional[str] = Field(default=None, max_length=500, description="User's biography")

    class Config:
        """Pydantic configuration."""
        json_encoders = {}
        schema_extra = {"example": {"name": "John Doe", "email": "john@example.com", "age": 30, "is_active": True, "bio": "Software developer"}}
class CreateUserRequest(BaseModel):
    """Request model for creating a new user."""
    name: str = Field(..., min_length=1, max_length=100)
    email: EmailStr
    age: Optional[int] = Field(default=None, ge=0, le=150)
    bio: Optional[str] = Field(default=None, max_length=500)
class UserResponse(BaseModel):
    """Response model for user data."""
    id: int
    name: str
    email: str
    age: int
    is_active: bool
    bio: Optional[str] = None
"""Schemas package initialization."""
from pydantic import BaseModel, EmailStr, Field
"""Pydantic test project entry point."""
from pydantic import ValidationError
def main():
    """Main function demonstrating Pydantic usage."""
    user_data = {"name": "John Doe", "email": "john@example.com", "age": 25}
    try:
        user = UserSchema(**user_data)
        print(f"Created user: {user}")
        if validate_email(user.email):
            print("Email validation passed")
        user_json = user.model_dump_json()
        print(f"User JSON: {user_json}")
        request = CreateUserRequest(name="Jane Doe", email="jane@example.com")
        print(f"Create request: {request}")
    except ValidationError as e:
        print(f"Validation error: {e}")
if __name__ == "__main__":
    main()
=== END BUNDLE CONTENT ===

=== REQUIREMENTS.TXT ===
pydantic
=== END REQUIREMENTS.TXT ===
